{"version":3,"file":"assets/js/main.d579a775.js","mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,KAgU/B,IA9Tb,MAEEC,YAAYC,GACVC,KAAKD,QAAUA,EACfC,KAAKC,UAAYL,SAASM,cAAcF,KAAKD,QAAQI,OACrDH,KAAKI,KAAOR,SAASM,cAAcF,KAAKD,QAAQK,MAChDJ,KAAKK,SAAWT,SAASM,cAAcF,KAAKD,QAAQM,UACpDL,KAAKM,QAAUV,SAASM,cAAcF,KAAKD,QAAQO,SACnDN,KAAKO,QAAUX,SAASM,cAAcF,KAAKD,QAAQQ,SACnDP,KAAKQ,UAAYZ,SAASM,cAAcF,KAAKD,QAAQS,WACrDR,KAAKS,UAAYb,SAASM,cAAcF,KAAKD,QAAQU,WACrDT,KAAKU,kBAAoBd,SAASM,cAAcF,KAAKD,QAAQW,mBAC7DV,KAAKU,kBAAoBd,SAASM,cAAcF,KAAKD,QAAQW,mBAC7DV,KAAKW,UAAY,EACjBX,KAAKG,MAAQ,EACbH,KAAKY,KAAO,CACVD,UAAWX,KAAKW,UAChBR,MAAO,EACPU,OAAQ,GACRC,KAAM,CAAEC,QAAS,EAAGC,QAAS,GAC7BC,KAAM,CAAEH,KAAM,CAAEC,QAAS,EAAGC,QAAS,GAAKb,MAAO,EAAGQ,UAAW,GAC/DO,iBAAkB,IAEpBlB,KAAKmB,SAAW,EAChBnB,KAAKoB,QAAS,EACdpB,KAAKqB,QAAU,EACfrB,KAAKsB,OAAS1B,SAAS2B,cAAc,UACrCvB,KAAKwB,IAAMxB,KAAKsB,OAAOG,WAAW,MAClCzB,KAAKa,OAAS,GACdb,KAAK0B,UAAY,GACjB1B,KAAK2B,aAAe,CAAC,EACrB3B,KAAKkB,iBAAmB,GACxBlB,KAAK4B,mBAAqB,GAC1B5B,KAAK6B,MACP,CAEAA,OAEuC,GAArC7B,KAAKY,KAAKM,iBAAiBY,OAAc9B,KAAK+B,sBAAwB/B,KAAKkB,iBAAmBlB,KAAKY,KAAKM,iBACxGlB,KAAKgC,YAELC,OAAOpC,iBAAiB,UAAU,KAC5BoC,OAAOC,WAAa,KACtBlC,KAAKmB,SAAWgB,KAAKC,MAAMH,OAAOC,YAAclC,KAAKW,UAAY,IACjEX,KAAKgC,aACAhC,KAAKmB,SAAWnB,KAAKD,QAAQoB,YAGtCvB,SAASC,iBAAiB,SAAUwC,IAC9BA,EAAEC,QAAUtC,KAAKsB,QAAUtB,KAAKoB,QAAQpB,KAAKuC,UAAUF,GACvDA,EAAEC,QAAUtC,KAAKK,UAAUL,KAAKwC,QAChCH,EAAEC,QAAUtC,KAAKM,SAASN,KAAKyC,OAC/BJ,EAAEC,QAAUtC,KAAKO,SAASP,KAAK0C,OAC/BL,EAAEC,QAAUtC,KAAKQ,WAAWR,KAAK2C,SACjCN,EAAEC,OAAOM,UAAUC,SAAS,gBAC9B7C,KAAKW,WAAa0B,EAAEC,OAAOQ,QAAQC,OACnC/C,KAAKU,kBAAkBsC,YAAc,IAAIX,EAAEC,OAAOQ,QAAQC,WAAWV,EAAEC,OAAOQ,QAAQC,SACtF/C,KAAKY,KAAKD,UAAYX,KAAKW,UAC3BX,KAAKyC,OACLzC,KAAKgC,YACP,GAEJ,CAEAD,sBAEE/B,KAAK4B,mBAAqB,IAAIqB,MAAMjD,KAAKW,UAAYX,KAAKW,WAAWuC,QACrE,MAAMC,EAAMnD,KAAK4B,mBAAmBwB,OAE9BC,EAAM,GAEZ,IAAK,IAAIC,EAAIH,EAAIrB,OAAS,EAAGwB,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIpB,KAAKC,MAAMD,KAAKqB,UAAYF,EAAI,KACvCH,EAAIG,GAAIH,EAAII,IAAM,CAACJ,EAAII,GAAIJ,EAAIG,GAClC,CAEA,KAAOD,EAAIvB,OAAS9B,KAAKW,WACvB0C,EAAII,KAAKN,EAAIO,OAAO,EAAG1D,KAAKW,YAK9B,OAFAX,KAAKkB,iBAAmBmC,EAEjBA,CACT,CAEArB,YACEhC,KAAKmB,SAAWc,OAAOC,WAAa,IAChCC,KAAKC,MAAMH,OAAOC,YAAclC,KAAKW,UAAY,IACjDX,KAAKD,QAAQoB,SACjBnB,KAAKsB,OAAOsB,UAAUe,IAAI,QAC1B3D,KAAKsB,OAAOsC,MAAQ5D,KAAKW,UAAYX,KAAKmB,SAC1CnB,KAAKsB,OAAOuC,OAAS7D,KAAKsB,OAAOsC,MAEjC5D,KAAKI,KAAK0D,sBAAsB,aAAc9D,KAAKsB,QAEnD,IAAIyC,EAAa,GACjB,IAAK,IAAIT,EAAI,EAAGA,EAAItD,KAAKW,UAAW2C,IAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIvD,KAAKW,UAAW4C,IAClCvD,KAAKwB,IAAIkB,OACT1C,KAAKwB,IAAIwC,UAAUT,EAAIvD,KAAKmB,SAAW,EAAGmC,EAAItD,KAAKmB,SAAW,GAC9DnB,KAAKwB,IAAIyC,UAAY,UACrBjE,KAAKwB,IAAI0C,SAAS,EAAG,EAAGlE,KAAKmB,SAAW,EAAGnB,KAAKmB,SAAW,GAEvB,IAAhCnB,KAAKkB,iBAAiBoC,GAAGC,IAC3BvD,KAAKwB,IAAIyC,UAAY,OACrBjE,KAAKwB,IAAI0C,SAAS,EAAG,EAAGlE,KAAKmB,SAAW,EAAGnB,KAAKmB,SAAW,GAG3DnB,KAAK0B,UAAY,CACfyC,KAAMnE,KAAKkB,iBAAiBoC,GAAGC,GAC/Ba,EAAGjC,KAAKC,MAAMmB,EAAKvD,KAAa,UAChCqE,EAAGlC,KAAKC,MAAMkB,EAAKtD,KAAa,UAChC4D,MAAOzB,KAAKC,MAAMpC,KAAKmB,UACvB0C,OAAQ1B,KAAKC,MAAMpC,KAAKmB,UACxBmD,IAAKhB,EAAI,EACTiB,IAAKhB,EAAI,IAENvD,KAAKwB,IAAIyC,UAAY,OAE5BjE,KAAKwB,IAAIgD,UAAY,SACrBxE,KAAKwB,IAAIiD,aAAe,SACxBzE,KAAKwB,IAAIkD,KAAOzC,OAAOC,WAAa,KAAOlC,KAAKW,UAAY,EACxD,kBACA,kBACJsB,OAAOC,WAAa,KAAOlC,KAAKW,UAC5BX,KAAKwB,IAAImD,SAAS3E,KAAKkB,iBAAiBoC,GAAGC,GAAIvD,KAAKmB,SAAW,EAAGnB,KAAKmB,SAAW,GAEtFnB,KAAKwB,IAAIoD,UAGTb,EAAWN,KAAK,CACdU,KAAMnE,KAAKkB,iBAAiBoC,GAAGC,GAC/Ba,EAAGjC,KAAKC,MAAMmB,EAAIvD,KAAKmB,UACvBkD,EAAGlC,KAAKC,MAAMkB,EAAItD,KAAKmB,UACvByC,MAAOzB,KAAKC,MAAMpC,KAAKmB,UACvB0C,OAAQ1B,KAAKC,MAAMpC,KAAKmB,UACxBmD,IAAKhB,EAAI,EACTiB,IAAKhB,EAAI,IAEXvD,KAAKa,OAAOiB,OAAS,EACrB9B,KAAKa,OAASkD,EAAWX,MAG/B,CAEAb,UAAUF,GACR,MAAM+B,EAAIjC,KAAKC,MAAMC,EAAEwC,SACjBR,EAAIlC,KAAKC,MAAMC,EAAEyC,SAEjBC,EAAY,KAiBhB/E,KAAKkB,iBAAmBlB,KAAKkB,iBAAiB8D,KAAK7B,GAC1CA,EAAI6B,KAAI3C,IACJ,GAALA,EAAQA,EAAIrC,KAAK2B,aAAawC,KACzB9B,GAAKrC,KAAK2B,aAAawC,OAAM9B,EAAI,GACnCA,OAKXrC,KAAKG,OAAS,EACdH,KAAKY,KAAKT,MAAQH,KAAKG,MACvBH,KAAKC,UAAU+C,YAAchD,KAAKG,MAElCH,KAAKgC,YACAhC,KAAKiF,WACLjF,KAAKkF,WADYlF,KAAKgC,WACR,EAGjBhC,KAAKmF,eAAef,EAAGC,KAErBrE,KAAK2B,aAAa4C,KAAOvE,KAAK0B,UAAU6C,MACtCvE,KAAK2B,aAAa0C,GAAKrE,KAAK0B,UAAU2C,EAAIrE,KAAK0B,UAAUmC,QAAQkB,IACjE/E,KAAK2B,aAAa0C,EAAIrE,KAAK0B,UAAUmC,QAAU7D,KAAK0B,UAAU2C,GAAGU,KAGnE/E,KAAK2B,aAAa2C,KAAOtE,KAAK0B,UAAU4C,MACtCtE,KAAK2B,aAAayC,EAAIpE,KAAK2B,aAAaiC,OAAS5D,KAAK0B,UAAU0C,GAAGW,IACnE/E,KAAK2B,aAAayC,GAAKpE,KAAK0B,UAAU0C,EAAIpE,KAAK0B,UAAUkC,OAAOmB,KAG1E,CAEAvC,QACqB,GAAfxC,KAAKoB,QAAgBpB,KAAKyC,OAC1B7C,SAASM,cAAc,aAAaN,SAASM,cAAc,YAAYkF,SAC3EpF,KAAKY,KAAKM,iBAAiBY,OAAS,EACpC9B,KAAKG,MAAQ,EACbH,KAAKgC,YACLhC,KAAKqF,QACLrF,KAAKoB,QAAS,EACdkE,QAAQC,IAAI,mBACd,CAEA9C,OACE+C,cAAcxF,KAAKqB,SACnBrB,KAAK+B,sBACL/B,KAAKC,UAAU+C,YAAc,EAC7BhD,KAAKG,MAAQ,EACbH,KAAKS,UAAUuC,YAAc,QAC7BhD,KAAKoB,QAAS,EACdkE,QAAQC,IAAI,eACd,CAEA5C,SACE3C,KAAKyF,QAAQ,SACf,CAEAJ,QACEC,QAAQC,IAAI,iBACZ,IAAIxE,EAAU,EAAGC,EAAU,EAE3BhB,KAAKqB,QAAUqE,aAAY,KACV,IAAX1E,IACFD,GAAW,EACXC,EAAU,GAGZA,GAAW,EAEXhB,KAAKS,UAAUuC,YAAc,GAAG2C,OAAO5E,GAASe,OAAS,EAAI,EAAI,KAAKf,KAAW4E,OAAO3E,GAASc,OAAS,EAAI,EAAI,KAAKd,IACvHhB,KAAKY,KAAKE,KAAO,CAAEC,UAASC,UAAQ,GACnC,IACL,CAEAyE,QAAQG,EAAMC,GACZ,MAAMC,EAAW,CACfnD,OAAQ,+BACYiD,GAAc,8HAEa5F,KAAKW,aAAaX,KAAKW,6DACnCgF,OAAO3F,KAAKY,KAAKE,KAAKC,SAASe,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKC,WAAW4E,OAAO3F,KAAKY,KAAKE,KAAKE,SAASc,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKE,6DACjJhB,KAAKY,KAAKT,+EACUH,KAAKY,KAAKK,KAAKd,iBAAiBwF,OAAO3F,KAAKY,KAAKK,KAAKH,KAAKC,SAASe,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKK,KAAKH,KAAKC,WAAW4E,OAAO3F,KAAKY,KAAKK,KAAKH,KAAKE,SAASc,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKK,KAAKH,KAAKE,sFAGhQ+E,OAAQ,+BACYH,GAAc,iDACAC,yDACCF,OAAO3F,KAAKY,KAAKE,KAAKC,SAASe,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKC,WAAW4E,OAAO3F,KAAKY,KAAKE,KAAKE,SAASc,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKE,6DACjJhB,KAAKY,KAAKT,+EACUH,KAAKY,KAAKK,KAAKd,iBAAiBwF,OAAO3F,KAAKY,KAAKK,KAAKH,KAAKC,SAASe,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKK,KAAKH,KAAKC,WAAW4E,OAAO3F,KAAKY,KAAKK,KAAKH,KAAKE,SAASc,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKK,KAAKH,KAAKE,sFAGhQyE,QAAS,+BACWG,GAAc,4CACLC,iFAK/B,IAAK,IAAIG,KAAOF,EACVE,GAAOJ,IACLhG,SAASM,cAAc,aAAaN,SAASM,cAAc,YAAYkF,SAC3EpF,KAAKI,KAAK6F,mBAAmB,aAAcH,EAASE,IACpDpG,SAASM,cAAc,oBAAoBL,iBAAiB,SAAS,IAAMD,SAASM,cAAc,YAAYkF,WAGpH,CAEA1C,OACEwD,aAAaC,QAAQ,OAAQC,KAAKC,UAAUrG,KAAKY,OACjD0E,QAAQC,IAAI,aACd,CAEAX,UACMsB,aAAaI,QAAQ,UACvBtG,KAAKY,KAAOwF,KAAKG,MAAML,aAAaI,QAAQ,SAE5CtG,KAAKS,UAAUuC,YAAc,GAAG2C,OAAO3F,KAAKY,KAAKE,KAAKC,SAASe,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKC,WAAW4E,OAAO3F,KAAKY,KAAKE,KAAKE,SAASc,OAAS,EAAI,EAAI,KAAK9B,KAAKY,KAAKE,KAAKE,UAEnLhB,KAAKW,UAAYX,KAAKY,KAAKD,UAC3BX,KAAKU,kBAAkBsC,YAAc,GAAGhD,KAAKW,aAAaX,KAAKW,YAE/DX,KAAKC,UAAU+C,YAAchD,KAAKY,KAAKT,MAG3C,CAEAgF,eAAef,EAAGC,GAChB,IAAK,IAAImC,KAASxG,KAAKa,OACrB,GAAIuD,GAAKoC,EAAMpC,GAAKA,GAAMoC,EAAMpC,EAAIoC,EAAM5C,OAAUS,GAAKmC,EAAMnC,GAAKA,GAAMmC,EAAMnC,EAAImC,EAAM3C,OAExF,OADA7D,KAAK2B,aAAe6E,GACb,EAGX,OAAO,CACT,CAEAvB,WACE,MAAMwB,EAAIzG,KAAK4B,mBAAmBwB,OAC5BsD,EAAI1G,KAAKkB,iBAAiBkC,OAIhC,OAHAqD,EAAE/C,OAAO,EAAG,GACZgD,EAAEhD,QAAQ,EAAE,GAEL+C,EAAEE,OAAM,CAACtE,EAAGiB,IAAMjB,GAAKqE,EAAEpD,IAClC,CAEA4B,WACElF,KAAKyF,QAAQ,SAAU,gBACzB,GAGoB,CACpBrF,KAAM,kBACNC,SAAU,SACVC,QAAS,QACTC,QAAS,QACTC,UAAW,UACXC,UAAW,cACXN,MAAO,cACPO,kBAAmB,wBACnBS,SAAU,IACX","sources":["webpack://rss-gem-puzzle/./src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\n  class Game {\n\n    constructor(setting) {\n      this.setting = setting;\n      this.movesElem = document.querySelector(this.setting.moves);\n      this.wrap = document.querySelector(this.setting.wrap);\n      this.startBtn = document.querySelector(this.setting.startBtn);\n      this.stopBtn = document.querySelector(this.setting.stopBtn);\n      this.saveBtn = document.querySelector(this.setting.saveBtn);\n      this.resultBtn = document.querySelector(this.setting.resultBtn);\n      this.timerElem = document.querySelector(this.setting.timerElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.frameSize = 4;\n      this.moves = 0;\n      this.info = {\n        frameSize: this.frameSize,\n        moves: 0,\n        blocks: [],\n        time: { minutes: 0, seconds: 0 },\n        best: { time: { minutes: 0, seconds: 0 }, moves: 0, frameSize: 0, },\n        currentBlocksMap: [],\n      };\n      this.itemSize = 0;\n      this.isGame = false;\n      this.isTimer = 0;\n      this.canvas = document.createElement('canvas');\n      this.ctx = this.canvas.getContext('2d');\n      this.blocks = [];\n      this.zeroBlock = [];\n      this.currentBlock = {};\n      this.currentBlocksMap = [];\n      this.winnerBlocksResult = [];\n      this.init();\n    }\n\n    init() {\n      // this.restore();\n      this.info.currentBlocksMap.length == 0 ? this.setCurrentBlocksMap() : this.currentBlocksMap = this.info.currentBlocksMap;\n      this.setCanvas();\n\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 900) {\n          this.itemSize = Math.floor(window.innerWidth / (this.frameSize + 2))\n          this.setCanvas();\n        } else this.itemSize = this.setting.itemSize\n      })\n\n      document.addEventListener('click', (e) => {\n        if (e.target == this.canvas && this.isGame) this.moveBlock(e);\n        if (e.target == this.startBtn) this.start();\n        if (e.target == this.stopBtn) this.stop();\n        if (e.target == this.saveBtn) this.save();\n        if (e.target == this.resultBtn) this.result();\n        if (e.target.classList.contains('frame-size')) {\n          this.frameSize = +e.target.dataset.action;\n          this.frameSizeInfoElem.textContent = `${+e.target.dataset.action}x${+e.target.dataset.action}`;\n          this.info.frameSize = this.frameSize\n          this.stop();\n          this.setCanvas();\n        }\n      })\n    }\n\n    setCurrentBlocksMap() {\n\n      this.winnerBlocksResult = [...Array(this.frameSize * this.frameSize).keys()]\n      const arr = this.winnerBlocksResult.flat()\n\n      const res = []\n\n      for (let i = arr.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n\n      while (res.length < this.frameSize) {\n        res.push(arr.splice(0, this.frameSize));\n      }\n\n      this.currentBlocksMap = res;\n\n      return res;\n    }\n\n    setCanvas() {\n      this.itemSize = window.innerWidth < 900\n        ? Math.floor(window.innerWidth / (this.frameSize + 2))\n        : this.setting.itemSize;\n      this.canvas.classList.add('game')\n      this.canvas.width = this.frameSize * this.itemSize\n      this.canvas.height = this.canvas.width\n\n      this.wrap.insertAdjacentElement('afterbegin', this.canvas);\n\n      let tempBlocks = [];\n      for (let i = 0; i < this.frameSize; i++) {\n        for (let j = 0; j < this.frameSize; j++) {\n          this.ctx.save();\n          this.ctx.translate(j * this.itemSize + 2, i * this.itemSize + 2);\n          this.ctx.fillStyle = '#e2e2e2'\n          this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n          if (this.currentBlocksMap[i][j] === 0) {\n            this.ctx.fillStyle = '#fff';\n            this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n            // zero block info to zeroBlock variable\n            this.zeroBlock = {\n              name: this.currentBlocksMap[i][j],\n              x: Math.floor(j * (this.itemSize)),\n              y: Math.floor(i * (this.itemSize)),\n              width: Math.floor(this.itemSize),\n              height: Math.floor(this.itemSize),\n              row: i + 1,\n              col: j + 1,\n            }\n          } else this.ctx.fillStyle = '#000';\n\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n          this.ctx.font = window.innerWidth < 400 && this.frameSize > 5\n            ? \"12px sans-serif\"\n            : \"20px sans-serif\";\n          window.innerWidth < 400 && this.frameSize > 5\n            ? this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n            : this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n          this.ctx.restore();\n\n          // push new block info to blocks array\n          tempBlocks.push({\n            name: this.currentBlocksMap[i][j],\n            x: Math.floor(j * this.itemSize),\n            y: Math.floor(i * this.itemSize),\n            width: Math.floor(this.itemSize),\n            height: Math.floor(this.itemSize),\n            row: i + 1,\n            col: j + 1,\n          })\n          this.blocks.length = 0\n          this.blocks = tempBlocks.flat()\n        }\n      }\n    }\n\n    moveBlock(e) {\n      const x = Math.floor(e.offsetX);\n      const y = Math.floor(e.offsetY);\n\n      const drawBlock = () => {\n        // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // // this.ctx.translate(this.zeroBlock.x, this.zeroBlock.y);\n\n        // this.ctx.fillStyle = '#e2e2e2'\n        // this.ctx.rect(this.zeroBlock.x, this.zeroBlock.y, this.currentBlock.width, this.currentBlock.height);\n        // this.ctx.fill()\n\n        // this.ctx.fillStyle = '#000'\n        // this.ctx.textAlign = 'center';\n        // this.ctx.textBaseline = 'middle';\n        // this.ctx.font = window.innerWidth < 400 && this.frameSize > 5\n        //   ? \"12px sans-serif\"\n        //   : \"20px sans-serif\";\n        // window.innerWidth < 400 && this.frameSize > 5\n        // this.ctx.fillText(this.currentBlock.name, this.zeroBlock.x + this.itemSize / 2, this.zeroBlock.y + this.itemSize / 2)\n\n        this.currentBlocksMap = this.currentBlocksMap.map((arr) => {\n          return arr.map(e => {\n            if (e == 0) e = this.currentBlock.name\n            else if (e == this.currentBlock.name) e = 0\n            return e\n          })\n        })\n\n\n        this.moves += 1\n        this.info.moves = this.moves\n        this.movesElem.textContent = this.moves\n\n        this.setCanvas()\n        if (!this.isSolved()) this.setCanvas()\n        else this.gameOver()\n      }\n\n      if (this.isClickOnBlock(x, y)) {\n\n        if (this.currentBlock.col == this.zeroBlock.col) {\n          if (this.currentBlock.y == this.zeroBlock.y + this.zeroBlock.height) drawBlock()\n          if (this.currentBlock.y + this.zeroBlock.height == this.zeroBlock.y) drawBlock()\n        }\n\n        if (this.currentBlock.row == this.zeroBlock.row) {\n          if (this.currentBlock.x + this.currentBlock.width == this.zeroBlock.x) drawBlock()\n          if (this.currentBlock.x == this.zeroBlock.x + this.zeroBlock.width) drawBlock()\n        }\n      }\n    }\n\n    start() {\n      if (this.isGame == true) this.stop();\n      if (document.querySelector('.message')) document.querySelector('.message').remove();\n      this.info.currentBlocksMap.length = 0\n      this.moves = 0\n      this.setCanvas()\n      this.timer();\n      this.isGame = true;\n      console.log('New game started');\n    }\n\n    stop() {\n      clearInterval(this.isTimer);\n      this.setCurrentBlocksMap();\n      this.movesElem.textContent = 0;\n      this.moves = 0\n      this.timerElem.textContent = `00:00`;\n      this.isGame = false;\n      console.log('Game stopped');\n    }\n\n    result() {\n      this.message('result')\n    }\n\n    timer() {\n      console.log('Timer Started')\n      let minutes = 0, seconds = 0\n\n      this.isTimer = setInterval(() => {\n        if (seconds == 59) {\n          minutes += 1\n          seconds = 0\n        }\n\n        seconds += 1\n\n        this.timerElem.textContent = `${String(minutes).length < 2 ? 0 : ''}${minutes}:${String(seconds).length < 2 ? 0 : ''}${seconds}`\n        this.info.time = { minutes, seconds }\n      }, 1000)\n    }\n\n    message(type, str) {\n      const messages = {\n        result: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>YOUR RESULTS</b></div>\n        <div class=\"message__frame-size\">Frame size: ${this.frameSize}x${this.frameSize}</div>\n        <div class=\"message__time\">Time: ${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.info.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.info.best.moves} | Time: ${String(this.info.best.time.minutes).length < 2 ? 0 : ''}${this.info.best.time.minutes}:${String(this.info.best.time.seconds).length < 2 ? 0 : ''}${this.info.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n        winner: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>${str}</b></div>\n        <div class=\"message__time\">Time: ${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.info.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.info.best.moves} | Time: ${String(this.info.best.time.minutes).length < 2 ? 0 : ''}${this.info.best.time.minutes}:${String(this.info.best.time.seconds).length < 2 ? 0 : ''}${this.info.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n        message: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__body\">${str}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n      }\n\n      for (let key in messages) {\n        if (key == type) {\n          if (document.querySelector('.message')) document.querySelector('.message').remove()\n          this.wrap.insertAdjacentHTML('afterbegin', messages[key])\n          document.querySelector('.message__button').addEventListener('click', () => document.querySelector('.message').remove())\n        }\n      }\n    }\n\n    save() {\n      localStorage.setItem('info', JSON.stringify(this.info))\n      console.log('Game saved')\n    }\n\n    restore() {\n      if (localStorage.getItem('info')) {\n        this.info = JSON.parse(localStorage.getItem('info'))\n\n        this.timerElem.textContent = `${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}`;\n\n        this.frameSize = this.info.frameSize\n        this.frameSizeInfoElem.textContent = `${this.frameSize}x${this.frameSize}`;\n\n        this.movesElem.textContent = this.info.moves\n        // this.blocks.textContent = this.info.blocks\n      }\n    }\n\n    isClickOnBlock(x, y) {\n      for (let block of this.blocks) {\n        if (x >= block.x && x <= (block.x + block.width) && y >= block.y && y <= (block.y + block.height)) {\n          this.currentBlock = block\n          return true\n        }\n      }\n      return false\n    }\n\n    isSolved() {\n      const w = this.winnerBlocksResult.flat()\n      const c = this.currentBlocksMap.flat()\n      w.splice(0, 1)\n      c.splice(-1,1)\n\n      return w.every((e, i) => e == c[i])\n    }\n\n    gameOver() {\n      this.message('winner', 'You winner!!!')\n    }\n  }\n\n  const game = new Game({\n    wrap: '.game-container',\n    startBtn: '.start',\n    stopBtn: '.stop',\n    saveBtn: '.save',\n    resultBtn: '.result',\n    timerElem: '.timer span',\n    moves: '.moves span',\n    frameSizeInfoElem: '.frame-size-info span',\n    itemSize: 80,\n  })\n\n  // draw(num, pos, elem) {\n  //   const frameSizesData = { 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight' }\n\n  //   if (!frameSizesData[num]) return gameContainerElem.insertAdjacentHTML(pos, this.message('Wrong frame size!'))\n\n  //   gameElem.setAttribute('class', `game ${frameSizesData[num]}`)\n\n  //   let random = [];\n  //   const n = num * num - 1;\n  //   while (random.length < n) {\n  //     let r = Math.floor(Math.random() * n) + 1;\n  //     if (!random.includes(r)) random.push(r);\n  //   }\n\n\n  //   const items = [...Array(num).keys()].map(i => `<div class=\"game__item\"><span>${random[i]}</span></div>`)\n  //   return items.map((el) => elem.insertAdjacentHTML(pos, el))\n  // }\n\n\n\n\n\n})\n\n\n\n\n\n"],"names":["document","addEventListener","constructor","setting","this","movesElem","querySelector","moves","wrap","startBtn","stopBtn","saveBtn","resultBtn","timerElem","frameSizeInfoElem","frameSize","info","blocks","time","minutes","seconds","best","currentBlocksMap","itemSize","isGame","isTimer","canvas","createElement","ctx","getContext","zeroBlock","currentBlock","winnerBlocksResult","init","length","setCurrentBlocksMap","setCanvas","window","innerWidth","Math","floor","e","target","moveBlock","start","stop","save","result","classList","contains","dataset","action","textContent","Array","keys","arr","flat","res","i","j","random","push","splice","add","width","height","insertAdjacentElement","tempBlocks","translate","fillStyle","fillRect","name","x","y","row","col","textAlign","textBaseline","font","fillText","restore","offsetX","offsetY","drawBlock","map","isSolved","gameOver","isClickOnBlock","remove","timer","console","log","clearInterval","message","setInterval","String","type","str","messages","winner","key","insertAdjacentHTML","localStorage","setItem","JSON","stringify","getItem","parse","block","w","c","every"],"sourceRoot":""}