{"version":3,"file":"assets/js/main.8c2538d6.js","mappings":"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","sources":["webpack://rss-gem-puzzle/./src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\n  class Game {\n\n    constructor(setting) {\n      this.setting = setting;\n      this.movesElem = document.querySelector(this.setting.moves);\n      this.wrap = document.querySelector(this.setting.wrap);\n      this.startBtn = document.querySelector(this.setting.startBtn);\n      this.stopBtn = document.querySelector(this.setting.stopBtn);\n      this.saveBtn = document.querySelector(this.setting.saveBtn);\n      this.resultBtn = document.querySelector(this.setting.resultBtn);\n      this.timerElem = document.querySelector(this.setting.timerElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.info = {\n        frameSize: 0,\n        moves: 0,\n        blocksMap: [],\n        winnerBlocksResult: [],\n        time: { minutes: 0, seconds: 0 },\n        best: { time: { minutes: 0, seconds: 0 }, moves: 0, frameSize: 0 },\n      };\n      this.frameSize = this.info.frameSize !== 0 ? this.info.frameSize : 4;\n      this.itemSize = 0;\n      this.moves = 0;\n      this.isGame = false;\n      this.isTimer = 0;\n      this.canvas = document.createElement('canvas');\n      this.ctx = this.canvas.getContext('2d');\n      this.blocks = [];\n      this.zeroBlock = [];\n      this.currentBlock = {};\n      this.currentBlocksMap = [];\n      this.winnerBlocksResult = [];\n      this.init();\n    }\n\n    init() {\n\n      this.restore();\n\n      if (this.info.blocksMap.length === 0) this.setCurrentBlocksMap()\n      if (this.info.winnerBlocksResult.length === 0) this.setWinnerBlocksResult()\n\n      this.setCanvas();\n\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 900) {\n          this.itemSize = Math.floor(window.innerWidth / (this.frameSize + 2))\n          this.setCanvas();\n        } else this.itemSize = this.setting.itemSize\n      })\n\n      document.addEventListener('click', (e) => {\n        if (e.target == this.canvas && this.isGame) this.moveBlock(e);\n        if (e.target == this.startBtn) this.start();\n        if (e.target == this.stopBtn) this.stop();\n        if (e.target == this.saveBtn) this.save();\n        if (e.target == this.resultBtn) this.result();\n        if (e.target.classList.contains('frame-size')) {\n          this.frameSize = +e.target.dataset.action;\n          this.frameSizeInfoElem.textContent = `${+e.target.dataset.action}x${+e.target.dataset.action}`;\n          this.info.frameSize = this.frameSize\n          this.moves = 0\n          this.movesElem.textContent = 0;\n          this.info.time.minutes = 0\n          this.info.time.seconds = 0\n          this.timerElem.textContent = `00:00`;\n          this.stop();\n          this.setCanvas();\n        }\n      })\n    }\n\n    setCurrentBlocksMap() {\n      if (this.winnerBlocksResult.length === 0) this.setWinnerBlocksResult()\n\n      const arr = this.winnerBlocksResult.slice()\n\n      const res = []\n\n      for (let i = arr.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n\n      while (res.length < this.frameSize) {\n        res.push(arr.splice(0, this.frameSize));\n      }\n\n      console.log(arr)\n      this.currentBlocksMap = res.slice();\n      this.info.blocksMap = res.slice()\n      return res;\n    }\n\n    setCanvas() {\n      this.itemSize = window.innerWidth < 900\n        ? Math.floor(window.innerWidth / (this.frameSize + 2))\n        : this.setting.itemSize;\n      this.canvas.classList.add('game')\n      this.canvas.width = this.frameSize * this.itemSize\n      this.canvas.height = this.canvas.width\n\n      this.wrap.insertAdjacentElement('afterbegin', this.canvas);\n\n      let tempBlocks = [];\n      for (let i = 0; i < this.frameSize; i++) {\n        for (let j = 0; j < this.frameSize; j++) {\n          this.ctx.save();\n          this.ctx.translate(j * this.itemSize + 2, i * this.itemSize + 2);\n          this.ctx.fillStyle = '#e2e2e2'\n          this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n          if (this.currentBlocksMap[i][j] === 0) {\n            this.ctx.fillStyle = '#fff';\n            this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n            // zero block info to zeroBlock variable\n            this.zeroBlock = {\n              name: this.currentBlocksMap[i][j],\n              x: Math.floor(j * (this.itemSize)),\n              y: Math.floor(i * (this.itemSize)),\n              width: Math.floor(this.itemSize),\n              height: Math.floor(this.itemSize),\n              row: i + 1,\n              col: j + 1,\n            }\n          } else this.ctx.fillStyle = '#000';\n\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n          this.ctx.font = window.innerWidth < 400 && this.frameSize > 5\n            ? \"12px sans-serif\"\n            : \"20px sans-serif\";\n          window.innerWidth < 400 && this.frameSize > 5\n            ? this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n            : this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n          this.ctx.restore();\n\n          // push new block info to blocks array\n          tempBlocks.push({\n            name: this.currentBlocksMap[i][j],\n            x: Math.floor(j * this.itemSize),\n            y: Math.floor(i * this.itemSize),\n            width: Math.floor(this.itemSize),\n            height: Math.floor(this.itemSize),\n            row: i + 1,\n            col: j + 1,\n          })\n          this.blocks.length = 0\n          this.blocks = tempBlocks.flat()\n        }\n      }\n    }\n\n    moveBlock(e) {\n      const x = Math.floor(e.offsetX);\n      const y = Math.floor(e.offsetY);\n\n      const drawBlock = () => {\n        // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // // this.ctx.translate(this.zeroBlock.x, this.zeroBlock.y);\n\n        // this.ctx.fillStyle = '#e2e2e2'\n        // this.ctx.rect(this.zeroBlock.x, this.zeroBlock.y, this.currentBlock.width, this.currentBlock.height);\n        // this.ctx.fill()\n\n        // this.ctx.fillStyle = '#000'\n        // this.ctx.textAlign = 'center';\n        // this.ctx.textBaseline = 'middle';\n        // this.ctx.font = window.innerWidth < 400 && this.frameSize > 5\n        //   ? \"12px sans-serif\"\n        //   : \"20px sans-serif\";\n        // window.innerWidth < 400 && this.frameSize > 5\n        // this.ctx.fillText(this.currentBlock.name, this.zeroBlock.x + this.itemSize / 2, this.zeroBlock.y + this.itemSize / 2)\n\n        this.currentBlocksMap = this.currentBlocksMap.map((arr) => {\n          return arr.map(e => {\n            if (e == 0) e = this.currentBlock.name\n            else if (e == this.currentBlock.name) e = 0\n            return e\n          })\n        })\n\n\n        this.moves += 1\n        this.movesElem.textContent = this.moves\n\n        this.setCanvas()\n        if (!this.isSolved()) this.setCanvas()\n        else this.gameOver()\n      }\n\n      if (this.isClickOnBlock(x, y)) {\n\n        if (this.currentBlock.col == this.zeroBlock.col) {\n          if (this.currentBlock.y == this.zeroBlock.y + this.zeroBlock.height) drawBlock()\n          if (this.currentBlock.y + this.zeroBlock.height == this.zeroBlock.y) drawBlock()\n        }\n\n        if (this.currentBlock.row == this.zeroBlock.row) {\n          if (this.currentBlock.x + this.currentBlock.width == this.zeroBlock.x) drawBlock()\n          if (this.currentBlock.x == this.zeroBlock.x + this.zeroBlock.width) drawBlock()\n        }\n      }\n    }\n\n    start() {\n      if (document.querySelector('.message')) document.querySelector('.message').remove();\n      this.info.blocksMap.length = 0\n      this.info.winnerBlocksResult.length = 0\n      \n      if (this.info.moves === 0 || this.isGame === true) {\n        this.moves = 0\n        this.movesElem.textContent = 0;\n      }\n\n      if (this.info.time.minutes === 0 && this.info.time.seconds === 0 || this.isGame === true) {\n        this.info.time.minutes = 0\n        this.info.time.seconds = 0\n        this.timerElem.textContent = `00:00`;\n        clearInterval(this.isTimer);\n      }\n\n      if (this.isGame === true) this.setCurrentBlocksMap();\n\n      this.setCanvas()\n      this.setWinnerBlocksResult()\n      this.timer();\n      this.isGame = true;\n      console.log('New game started');\n    }\n\n    stop() {\n      clearInterval(this.isTimer);\n      // this.setCurrentBlocksMap();\n      this.isGame = false;\n      console.log('Game stopped');\n    }\n\n    result() {\n      this.message('result')\n    }\n\n    timer() {\n      console.log('Timer Started')\n      let { minutes, seconds } = this.info.time\n      // let minutes = 0, seconds = 0\n\n      this.isTimer = setInterval(() => {\n        if (seconds == 59) {\n          minutes += 1\n          seconds = 0\n        }\n        seconds += 1\n\n        this.timerElem.textContent = `${String(minutes).length < 2 ? 0 : ''}${minutes}:${String(seconds).length < 2 ? 0 : ''}${seconds}`\n        this.info.time = { minutes, seconds }\n      }, 1000)\n    }\n\n    message(type, str) {\n      const messages = {\n        result: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>YOUR RESULTS</b></div>\n        <div class=\"message__frame-size\">Frame size: ${this.frameSize}x${this.frameSize}</div>\n        <div class=\"message__time\">Time: ${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.info.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.info.best.moves} | Time: ${String(this.info.best.time.minutes).length < 2 ? 0 : ''}${this.info.best.time.minutes}:${String(this.info.best.time.seconds).length < 2 ? 0 : ''}${this.info.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n        winner: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>${str}</b></div>\n        <div class=\"message__time\">Time: ${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.info.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.info.best.moves} | Time: ${String(this.info.best.time.minutes).length < 2 ? 0 : ''}${this.info.best.time.minutes}:${String(this.info.best.time.seconds).length < 2 ? 0 : ''}${this.info.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n        message: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__body\">${str}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n      }\n\n      for (let key in messages) {\n        if (key == type) {\n          if (document.querySelector('.message')) document.querySelector('.message').remove()\n          this.wrap.insertAdjacentHTML('afterbegin', messages[key])\n          document.querySelector('.message__button').addEventListener('click', () => document.querySelector('.message').remove())\n        }\n      }\n    }\n\n    save() {\n      this.info.frameSize = this.frameSize\n      this.info.moves = this.moves\n      this.info.blocksMap = this.currentBlocksMap.slice()\n      this.info.winnerBlocksResult = this.winnerBlocksResult.slice()\n      localStorage.setItem('info', JSON.stringify(this.info))\n      console.log('Game saved')\n    }\n\n    restore() {\n      if (localStorage.getItem('info')) {\n        this.info = JSON.parse(localStorage.getItem('info'))\n\n        this.timerElem.textContent = `${String(this.info.time.minutes).length < 2 ? 0 : ''}${this.info.time.minutes}:${String(this.info.time.seconds).length < 2 ? 0 : ''}${this.info.time.seconds}`;\n\n        this.frameSize = this.info.frameSize\n        this.frameSizeInfoElem.textContent = `${this.frameSize}x${this.frameSize}`;\n\n        this.movesElem.textContent = this.info.moves\n        this.moves = this.info.moves\n\n        this.currentBlocksMap = this.info.blocksMap.length !== 0 ? this.info.blocksMap.slice() : false\n      }\n    }\n\n    isClickOnBlock(x, y) {\n      for (let block of this.blocks) {\n        if (x >= block.x && x <= (block.x + block.width) && y >= block.y && y <= (block.y + block.height)) {\n          this.currentBlock = block\n          return true\n        }\n      }\n      return false\n    }\n\n    setWinnerBlocksResult() {\n      this.winnerBlocksResult = [...Array(this.frameSize * this.frameSize).keys()]\n    }\n\n    isSolved() {\n      const w = this.winnerBlocksResult.slice()\n      const c = this.currentBlocksMap.flat()\n      w.splice(0, 1)\n      c.splice(c.length - 1, 1)\n      return w.every((e, i) => e == c[i])\n    }\n\n    gameOver() {\n      this.info.best.time.minutes = this.info.time.minutes;\n      this.info.best.time.seconds = this.info.time.seconds;\n      this.info.best.moves = this.moves;\n      this.info.best.frameSize = this.frameSize;\n\n      this.save();\n      this.message('winner', 'You winner!!!');\n      console.log('Winner!');\n    }\n  }\n\n  const game = new Game({\n    wrap: '.game-container',\n    startBtn: '.start',\n    stopBtn: '.stop',\n    saveBtn: '.save',\n    resultBtn: '.result',\n    timerElem: '.timer span',\n    moves: '.moves span',\n    frameSizeInfoElem: '.frame-size-info span',\n    itemSize: 80,\n  })\n})\n\n\n\n\n\n"],"names":["document","addEventListener","constructor","setting","this","movesElem","querySelector","moves","wrap","startBtn","stopBtn","saveBtn","resultBtn","timerElem","frameSizeInfoElem","info","frameSize","blocksMap","winnerBlocksResult","time","minutes","seconds","best","itemSize","isGame","isTimer","canvas","createElement","ctx","getContext","blocks","zeroBlock","currentBlock","currentBlocksMap","init","restore","length","setCurrentBlocksMap","setWinnerBlocksResult","setCanvas","window","innerWidth","Math","floor","e","target","moveBlock","start","stop","save","result","classList","contains","dataset","action","textContent","arr","slice","res","i","j","random","push","splice","console","log","add","width","height","insertAdjacentElement","tempBlocks","translate","fillStyle","fillRect","name","x","y","row","col","textAlign","textBaseline","font","fillText","flat","offsetX","offsetY","drawBlock","map","isSolved","gameOver","isClickOnBlock","remove","clearInterval","timer","message","setInterval","String","type","str","messages","winner","key","insertAdjacentHTML","localStorage","setItem","JSON","stringify","getItem","parse","block","Array","keys","w","c","every"],"sourceRoot":""}