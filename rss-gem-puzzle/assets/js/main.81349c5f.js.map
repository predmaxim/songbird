{"version":3,"file":"assets/js/main.81349c5f.js","mappings":"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","sources":["webpack://rss-gem-puzzle/./src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n\n  class Game {\n\n    constructor(setting) {\n      this.setting = setting;\n      this.movesElem = document.querySelector(this.setting.moves);\n      this.wrap = document.querySelector(this.setting.wrap);\n      this.startBtn = document.querySelector(this.setting.startBtn);\n      this.stopBtn = document.querySelector(this.setting.stopBtn);\n      this.saveBtn = document.querySelector(this.setting.saveBtn);\n      this.resultBtn = document.querySelector(this.setting.resultBtn);\n      this.timerElem = document.querySelector(this.setting.timerElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.frameSizeInfoElem = document.querySelector(this.setting.frameSizeInfoElem);\n      this.info = [\n        {\n          id: 3,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n        {\n          id: 4,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n        {\n          id: 5,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n        {\n          id: 6,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n        {\n          id: 7,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n        {\n          id: 8,\n          time: { minutes: 0, seconds: 0 },\n          moves: 0,\n          blocksMap: [],\n          winnerBlocksResult: [],\n          best: {\n            time: { minutes: 0, seconds: 0 },\n            moves: 0,\n          },\n        },\n      ];\n      this.frameSize = this.info.filter(e => e.id == 4)[0]; //!!!!!!!!!!!!\n      this.itemSize = 0;\n      this.moves = 0;\n      this.isGame = false;\n      this.isTimer = 0;\n      this.canvas = document.createElement('canvas');\n      this.ctx = this.canvas.getContext('2d');\n      this.blocks = [];\n      this.zeroBlock = [];\n      this.currentBlock = {};\n      this.currentBlocksMap = [];\n      this.winnerBlocksResult = [];\n      this.init();\n    }\n\n    init() {\n\n      this.restore();\n\n      if (this.frameSize.blocksMap.length === 0) this.setCurrentBlocksMap()\n      if (this.frameSize.winnerBlocksResult.length === 0) this.setWinnerBlocksResult()\n\n      this.setCanvas();\n\n      window.addEventListener('resize', () => {\n        if (window.innerWidth < 900) {\n          this.itemSize = Math.floor(window.innerWidth / (this.frameSize.id + 2))\n          this.setCanvas();\n        } else this.itemSize = this.setting.itemSize\n      })\n\n      document.addEventListener('click', (e) => {\n        if (e.target == this.canvas && this.isGame) this.moveBlock(e);\n        if (e.target == this.startBtn) this.start();\n        if (e.target == this.stopBtn) this.stop();\n        if (e.target == this.saveBtn) this.save();\n        if (e.target == this.resultBtn) this.result();\n        if (e.target.classList.contains('frame-size')) {\n\n          let target = +e.target.dataset.action\n\n          this.frameSize = this.info.filter(e => e.id === target)[0];\n          this.frameSizeInfoElem.textContent = `${target}x${target}`;\n          this.clearMoves();\n          this.clearTimer();\n          this.stop();\n          this.setCurrentBlocksMap();\n          this.setCanvas();\n        }\n      })\n    }\n\n    setCurrentBlocksMap() {\n      // if (this.winnerBlocksResult.length === 0) \n      this.setWinnerBlocksResult()\n\n      const arr = this.winnerBlocksResult.slice()\n\n      const res = []\n\n      for (let i = arr.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n\n      while (res.length < this.frameSize.id) {\n        res.push(arr.splice(0, this.frameSize.id));\n      }\n\n      this.currentBlocksMap = res.slice();\n      this.frameSize.blocksMap = res.slice()\n      return res;\n    }\n\n    setCanvas() {\n      this.itemSize = window.innerWidth < 900\n        ? Math.floor(window.innerWidth / (this.frameSize.id + 2))\n        : this.setting.itemSize;\n\n      this.canvas.classList.add('game')\n      this.canvas.width = this.frameSize.id * this.itemSize\n      this.canvas.height = this.canvas.width\n\n      this.wrap.insertAdjacentElement('afterbegin', this.canvas);\n\n      let tempBlocks = [];\n      for (let i = 0; i < this.frameSize.id; i++) {\n        for (let j = 0; j < this.frameSize.id; j++) {\n          this.ctx.save();\n          this.ctx.translate(j * this.itemSize + 2, i * this.itemSize + 2);\n          this.ctx.fillStyle = '#e2e2e2'\n          this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n          if (this.currentBlocksMap[i][j] === 0) {\n            this.ctx.fillStyle = '#fff';\n            this.ctx.fillRect(0, 0, this.itemSize - 4, this.itemSize - 4);\n\n            // zero block info to zeroBlock variable\n            this.zeroBlock = {\n              name: this.currentBlocksMap[i][j],\n              x: Math.floor(j * (this.itemSize)),\n              y: Math.floor(i * (this.itemSize)),\n              width: Math.floor(this.itemSize),\n              height: Math.floor(this.itemSize),\n              row: i + 1,\n              col: j + 1,\n            }\n          } else this.ctx.fillStyle = '#000';\n\n          this.ctx.textAlign = 'center';\n          this.ctx.textBaseline = 'middle';\n          this.ctx.font = window.innerWidth < 400 && this.frameSize.id > 5\n            ? \"12px sans-serif\"\n            : \"20px sans-serif\";\n          window.innerWidth < 400 && this.frameSize.id > 5\n            ? this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n            : this.ctx.fillText(this.currentBlocksMap[i][j], this.itemSize / 2, this.itemSize / 2)\n          this.ctx.restore();\n\n          // push new block info to blocks array\n          tempBlocks.push({\n            name: this.currentBlocksMap[i][j],\n            x: Math.floor(j * this.itemSize),\n            y: Math.floor(i * this.itemSize),\n            width: Math.floor(this.itemSize),\n            height: Math.floor(this.itemSize),\n            row: i + 1,\n            col: j + 1,\n          })\n          this.blocks.length = 0\n          this.blocks = tempBlocks.flat()\n        }\n      }\n    }\n\n    moveBlock(e) {\n      const x = Math.floor(e.offsetX);\n      const y = Math.floor(e.offsetY);\n\n      const drawBlock = () => {\n        // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // // this.ctx.translate(this.zeroBlock.x, this.zeroBlock.y);\n\n        // this.ctx.fillStyle = '#e2e2e2'\n        // this.ctx.rect(this.zeroBlock.x, this.zeroBlock.y, this.currentBlock.width, this.currentBlock.height);\n        // this.ctx.fill()\n\n        // this.ctx.fillStyle = '#000'\n        // this.ctx.textAlign = 'center';\n        // this.ctx.textBaseline = 'middle';\n        // this.ctx.font = window.innerWidth < 400 && this.frameSize > 5\n        //   ? \"12px sans-serif\"\n        //   : \"20px sans-serif\";\n        // window.innerWidth < 400 && this.frameSize > 5\n        // this.ctx.fillText(this.currentBlock.name, this.zeroBlock.x + this.itemSize / 2, this.zeroBlock.y + this.itemSize / 2)\n\n        this.currentBlocksMap = this.currentBlocksMap.map((arr) => {\n          return arr.map(e => {\n            if (e == 0) e = this.currentBlock.name\n            else if (e == this.currentBlock.name) e = 0\n            return e\n          })\n        })\n\n\n        this.moves += 1\n        this.movesElem.textContent = this.moves\n\n        this.setCanvas()\n        if (!this.isSolved()) this.setCanvas()\n        else this.gameOver()\n      }\n\n      if (this.isClickOnBlock(x, y)) {\n\n        if (this.currentBlock.col == this.zeroBlock.col) {\n          if (this.currentBlock.y == this.zeroBlock.y + this.zeroBlock.height) drawBlock()\n          if (this.currentBlock.y + this.zeroBlock.height == this.zeroBlock.y) drawBlock()\n        }\n\n        if (this.currentBlock.row == this.zeroBlock.row) {\n          if (this.currentBlock.x + this.currentBlock.width == this.zeroBlock.x) drawBlock()\n          if (this.currentBlock.x == this.zeroBlock.x + this.zeroBlock.width) drawBlock()\n        }\n      }\n    }\n\n    start() {\n      if (document.querySelector('.message')) document.querySelector('.message').remove();\n      this.frameSize.blocksMap.length = 0;\n      this.frameSize.winnerBlocksResult.length = 0;\n\n      if (this.frameSize.moves === 0 || this.isGame === true) {\n        this.clearMoves();\n      }\n\n      if (this.frameSize.time.minutes === 0 && this.frameSize.time.seconds === 0 || this.isGame === true) {\n        this.clearTimer();\n      }\n\n      if (this.isGame === true) this.setCurrentBlocksMap();\n\n      this.setCanvas()\n      this.setWinnerBlocksResult()\n      this.timer();\n      this.isGame = true;\n      console.log('New game started');\n    }\n\n    stop() {\n      clearInterval(this.isTimer);\n      // this.setCurrentBlocksMap();\n      this.isGame = false;\n      console.log('Game stopped');\n    }\n\n    result() {\n      this.message('result')\n    }\n\n    timer() {\n      console.log('Timer Started')\n      let { minutes, seconds } = this.frameSize.time\n      // let minutes = 0, seconds = 0\n\n      this.isTimer = setInterval(() => {\n        if (seconds == 59) {\n          minutes += 1\n          seconds = 0\n        }\n        seconds += 1\n\n        this.timerElem.textContent = `${String(minutes).length < 2 ? 0 : ''}${minutes}:${String(seconds).length < 2 ? 0 : ''}${seconds}`\n        this.frameSize.time = { minutes, seconds }\n      }, 1000)\n    }\n\n    clearTimer() {\n      clearInterval(this.isTimer);\n      this.timerElem.textContent = `00:00`;\n      this.frameSize.time.minutes = 0;\n      this.frameSize.time.seconds = 0;\n    }\n\n    clearMoves() {\n      this.moves = 0;\n      this.movesElem.textContent = 0;\n      // this.frameSize.moves = 0;\n    }\n\n    message(type, str) {\n\n      const messages = {\n        result: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>YOUR RESULTS</b></div>\n        <div class=\"message__frame-size\">Frame size: ${this.frameSize.id}x${this.frameSize.id}</div>\n        <div class=\"message__time\">Time: ${String(this.frameSize.time.minutes).length < 2 ? 0 : ''}${this.frameSize.time.minutes}:${String(this.frameSize.time.seconds).length < 2 ? 0 : ''}${this.frameSize.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.frameSize.best.moves} | Time: ${String(this.frameSize.best.time.minutes).length < 2 ? 0 : ''}${this.frameSize.best.time.minutes}:${String(this.frameSize.best.time.seconds).length < 2 ? 0 : ''}${this.frameSize.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n\n        winner: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__header\"><b>${str}</b></div>\n        <div class=\"message__time\">Time: ${String(this.frameSize.time.minutes).length < 2 ? 0 : ''}${this.frameSize.time.minutes}:${String(this.frameSize.time.seconds).length < 2 ? 0 : ''}${this.frameSize.time.seconds}</div>\n        <div class=\"message__moves\">Moves: ${this.moves}</div>\n        <div class=\"message__moves\"><b>Best result:</b> Moves: ${this.frameSize.best.moves} | Time: ${String(this.frameSize.best.time.minutes).length < 2 ? 0 : ''}${this.frameSize.best.time.minutes}:${String(this.frameSize.best.time.seconds).length < 2 ? 0 : ''}${this.frameSize.best.time.seconds}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n\n        message: `\n      <div class=\"message ${type ? type : ''}\">\n        <div class=\"message__body\">${str}</div>\n        <button class=\"message__button\">Close</button>\n      </div>`,\n      }\n\n      for (let key in messages) {\n        if (key == type) {\n          if (document.querySelector('.message')) document.querySelector('.message').remove()\n          this.wrap.insertAdjacentHTML('afterbegin', messages[key])\n          document.querySelector('.message__button').addEventListener('click', () => document.querySelector('.message').remove())\n        }\n      }\n    }\n\n    save() {\n      this.frameSize.moves = this.moves\n      this.frameSize.blocksMap = this.currentBlocksMap.slice()\n      this.frameSize.winnerBlocksResult = this.winnerBlocksResult.slice()\n      localStorage.setItem('info', JSON.stringify(this.info))\n      console.log('Game saved')\n    }\n\n    restore() {\n      if (localStorage.getItem('info')) {\n        this.info = JSON.parse(localStorage.getItem('info'))\n\n        this.timerElem.textContent = `${String(this.frameSize.time.minutes).length < 2 ? 0 : ''}${this.frameSize.time.minutes}:${String(this.frameSize.time.seconds).length < 2 ? 0 : ''}${this.frameSize.time.seconds}`;\n\n        this.frameSizeInfoElem.textContent = `${this.frameSize.id}x${this.frameSize.id}`;\n\n        this.movesElem.textContent = this.frameSize.moves\n        this.moves = this.frameSize.moves\n\n        this.currentBlocksMap = this.frameSize.blocksMap.length !== 0 ? this.frameSize.blocksMap.slice() : false\n      }\n    }\n\n    isClickOnBlock(x, y) {\n      for (let block of this.blocks) {\n        if (x >= block.x && x <= (block.x + block.width) && y >= block.y && y <= (block.y + block.height)) {\n          this.currentBlock = block\n          return true\n        }\n      }\n      return false\n    }\n\n    setWinnerBlocksResult() {\n      this.winnerBlocksResult = [...Array(this.frameSize.id * this.frameSize.id).keys()]\n    }\n\n    isSolved() {\n      const w = this.winnerBlocksResult.slice()\n      const c = this.currentBlocksMap.flat()\n      w.splice(0, 1)\n      c.splice(c.length - 1, 1)\n      return w.every((e, i) => e == c[i])\n    }\n\n    gameOver() {\n\n      this.frameSize.best.time.minutes = this.frameSize.time.minutes;\n      this.frameSize.best.time.seconds = this.frameSize.time.seconds;\n      this.frameSize.best.moves = this.moves;\n\n      this.save();\n      this.message('winner', 'YOU WON!!!');\n      console.log('Winner!');\n    }\n  }\n\n  const game = new Game({\n    wrap: '.game-container',\n    startBtn: '.start',\n    stopBtn: '.stop',\n    saveBtn: '.save',\n    resultBtn: '.result',\n    timerElem: '.timer span',\n    moves: '.moves span',\n    frameSizeInfoElem: '.frame-size-info span',\n    itemSize: 80,\n  })\n})\n\n\n\n\n\n"],"names":["document","addEventListener","constructor","setting","this","movesElem","querySelector","moves","wrap","startBtn","stopBtn","saveBtn","resultBtn","timerElem","frameSizeInfoElem","info","id","time","minutes","seconds","blocksMap","winnerBlocksResult","best","frameSize","filter","e","itemSize","isGame","isTimer","canvas","createElement","ctx","getContext","blocks","zeroBlock","currentBlock","currentBlocksMap","init","restore","length","setCurrentBlocksMap","setWinnerBlocksResult","setCanvas","window","innerWidth","Math","floor","target","moveBlock","start","stop","save","result","classList","contains","dataset","action","textContent","clearMoves","clearTimer","arr","slice","res","i","j","random","push","splice","add","width","height","insertAdjacentElement","tempBlocks","translate","fillStyle","fillRect","name","x","y","row","col","textAlign","textBaseline","font","fillText","flat","offsetX","offsetY","drawBlock","map","isSolved","gameOver","isClickOnBlock","remove","timer","console","log","clearInterval","message","setInterval","String","type","str","messages","winner","key","insertAdjacentHTML","localStorage","setItem","JSON","stringify","getItem","parse","block","Array","keys","w","c","every"],"sourceRoot":""}